Author: Justin Wang
Class: EE104

*** Needed libraries and packages **


We need a couple of libraries and packages listed below here for this lab.

A) Packages for Lab8.ipynb
import tensorflow as tf
from keras.datasets import cifar10
from tensorflow import keras
from tensorflow.keras import datasets, layers, models
from keras import regularizers
import numpy as np
import matplotlib.pyplot as plt

from tensorflow.keras.optimizers import SGD

B) Packages for Lab8-pt2.ipynb
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
from keras import regularizers
from keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization

C) Packages for Balloon Flight Game
import pgzrun
from random import randint
import pgzero
from pgzero.builtins import Actor


1) Lab8.ipynb



2) Lab8-pt2.ipynb



3) Balloon Flight

This program will run a game called Balloon Flight, where we have to click on the screen to make the balloon rise while avoiding moving objects 
or touching either side of the screen. All of the critical information on this game can be found in Coding Games in Python (Chapter 8, pg. 116-117).
I've followed the book to get the basic game, and now we're going to make a couple of alterations.

A) More High Scores 

To add more spaces for high scores on the game, I added several more numbers in the accompanying text file:
0 0 0 0 0 0 0 0 0 0 


B) Adding an extra actor

To add another obstacle in the game, I changed the code to add another bird using the same image.
The following code accompanies this revision:

Line 29	--->	bird2 = Actor('bird-up')
Line 30	--->	bird2.pos = randint(800, 1600), randint(10, 200)

Line 76	--->	def draw():
		    screen.blit('background', (0,0))
			    if not game_over:
	 		       balloon.draw()
	 		       bird.draw()
New code --->	  	       bird2.draw()
		     	       house.draw()
		  	       tree.draw()
		  	       screen.draw.text('Score: ' + str(score), (700, 5), color='black')
			    else:
			        display_high_scores()


Line 100 --->	def flap():
 		   global bird_up
		    if bird_up:
		        bird.image = 'bird-down'
--->		        bird2.image = 'bird-down'
		        bird_up = False
		    else:
		        bird.image = 'bird-up'
--->		        bird2.image = 'bird-up'
		        bird_up = True


Line 112:

def update():
    global game_over, score, number_of_updates
    if not game_over:
        if not up:
            balloon.y += GRAVITY_STRENGTH  # gravity
        if bird.x > 0:
            bird.x -= 4
            if number_of_updates == 9:
                flap()
                number_of_updates = 0
            else:
                number_of_updates += 1
        else:
            bird.x = randint(800, 1600)
            bird.y = randint(10, 200)
            score += 1
            number_of_updates = 0
            
-->    if bird2.x > 0:
            bird2.x -= 4
            if number_of_updates == 9:
                flap()
                number_of_updates = 0
            else:
                number_of_updates += 1
        else:
            bird2.x = randint(800, 1600)
            bird2.y = randint(10, 200)
            score += 1
            number_of_updates = 0

        if house.right > 0:
            house.x -= 2
        else:
            house.x = randint(800, 1600)
            score += 1

        if tree.right > 0:
            tree.x -= 2
        else:
            tree.x = randint(800, 1600)
            score += 1
        
        if balloon.top < 0 or balloon.bottom > 560:
            game_over = True
            update_high_scores()

        if (balloon.collidepoint(bird.x, bird.y) or
 -->            balloon.collidepoint(bird2.x, bird2.y) or
                balloon.collidepoint(house.x, house.y) or
                balloon.collidepoint(tree.x, tree.y)):
            game_over = True
            update_high_scores()


pgzrun.go()

C) Space out the obstacles

To prevent obstacles from overlapping and making the game feel unrealistic, I had the obstacles pushed back or forward based on what type they were. 

Line 155:

        if bird.x == house.x:
            bird.x -= 3
            
        if bird2.x == house.x:
            bird2.x -= 10    
            
        if bird.x == tree.x:
            bird.x += 9
            
        if bird2.x == tree.x:
            bird2.x -= 7
            
        if house.x == tree.x:
            house.x += 8

D) Speed it up

For this final choice, I modified an object to be faster than the other objects. I did this by changing the number of pixels the obstacles move by. Also, remember to update the flap() function below to match the new speed. 

Line 130:

        if bird2.x > 0:
            bird2.x -= 6
            if number_of_updates == 13:
                flap()
                number_of_updates = 0
            else:
                number_of_updates += 1